// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 2.19.2 (stable) (Tue Feb 7 18:37:17 2023 +0000) on "linux_x64"
// Module: zapp_user_main
// Flags: soundNullSafety(true), enableAsserts(true)
define('zapp_user_main', ['dart_sdk'], (function load__zapp_user_main(dart_sdk) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const js = dart_sdk.js;
  const ui = dart_sdk.ui;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  var $46zapp_entry = Object.create(dart.library);
  var main = Object.create(dart.library);
  var web_plugin_registrant = Object.create(dart.library);
  var banking = Object.create(dart.library);
  var $toString = dartx.toString;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T = {
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    ListOfString: () => (T.ListOfString = dart.constFn(core.List$(core.String)))(),
    ListOfStringTodynamic: () => (T.ListOfStringTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T.ListOfString()])))(),
    JSArrayOfString: () => (T.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    dynamicToNull: () => (T.dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))(),
    VoidToNull: () => (T.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    ObjectAndStackTraceTovoid: () => (T.ObjectAndStackTraceTovoid = dart.constFn(dart.fnType(dart.void, [core.Object, core.StackTrace])))(),
    ZoneAndZoneDelegateAndZone__Tovoid: () => (T.ZoneAndZoneDelegateAndZone__Tovoid = dart.constFn(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, core.String])))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.fn(main.main, T.VoidTovoid());
    }
  }, false);
  var C = [void 0];
  var I = ["file:///zapp/project/lib/banking.dart"];
  $46zapp_entry.runAppGuarded = function runAppGuarded() {
    async.runZonedGuarded(core.Null, dart.fn(() => {
      if (T.ListOfStringTodynamic().is(C[0] || CT.C0)) {
        T.ListOfStringTodynamic().as(C[0] || CT.C0)(T.JSArrayOfString().of([]));
      } else {
        (C[0] || CT.C0)();
      }
      if (js.context.hasProperty("__notifyFlutterRendered")) {
        async.Future.delayed(new core.Duration.new({milliseconds: 250})).then(core.Null, dart.fn(_ => {
          js.context.callMethod("__notifyFlutterRendered", [false]);
        }, T.dynamicToNull()));
      }
    }, T.VoidToNull()), dart.fn((e, stackTrace) => {
      if (js.context.hasProperty("zappHandlerUserError")) {
        js.context.callMethod("zappHandlerUserError", [e[$toString](), stackTrace.toString()]);
      }
    }, T.ObjectAndStackTraceTovoid()), {zoneSpecification: new async._ZoneSpecification.new({print: dart.fn((self, parent, zone, line) => {
          if (js.context.hasProperty("zappHandlerUserPrint")) {
            js.context.callMethod("zappHandlerUserPrint", [line]);
          }
        }, T.ZoneAndZoneDelegateAndZone__Tovoid())})});
  };
  $46zapp_entry.main = function main$() {
    return async.async(dart.void, function* main() {
      yield ui.webOnlyWarmupEngine({runApp: dart.fn(() => {
          $46zapp_entry.runAppGuarded();
        }, T.VoidToNull()), registerPlugins: dart.fn(() => {
          web_plugin_registrant.registerPlugins();
        }, T.VoidToNull())});
    });
  };
  main.main = function main$0() {
    let checkingAccount = new banking.CheckingAccount.new("Checking Account", 100);
    core.print("Initial Checking Account Balance: " + dart.str(checkingAccount.balance));
    checkingAccount.deposit(50);
    core.print("After Deposit: " + dart.str(checkingAccount.balance));
    checkingAccount.withdraw(30);
    core.print("After Withdrawal: " + dart.str(checkingAccount.balance));
    let savingsAccount = new banking.SavingsAccount.new("Savings Account", 100);
    core.print("Initial Savings Account Balance: " + dart.str(savingsAccount.balance));
    savingsAccount.deposit(50);
    core.print("After Deposit: " + dart.str(savingsAccount.balance));
    savingsAccount.withdraw(30);
    core.print("After Withdrawal: " + dart.str(savingsAccount.balance));
  };
  web_plugin_registrant.registerPlugins = function registerPlugins() {
  };
  var accountName$ = dart.privateName(banking, "Account.accountName");
  var balance$ = dart.privateName(banking, "Account.balance");
  var _add = dart.privateName(banking, "_add");
  var _subtract = dart.privateName(banking, "_subtract");
  const _is_Account_default = Symbol('_is_Account_default');
  banking.Account$ = dart.generic(T => {
    class Account extends core.Object {
      get accountName() {
        return this[accountName$];
      }
      set accountName(value) {
        this[accountName$] = value;
      }
      get balance() {
        return this[balance$];
      }
      set balance(value) {
        this[balance$] = T.as(value);
      }
      deposit(amount) {
        T.as(amount);
        this.balance = this[_add](this.balance, amount);
      }
      withdraw(amount) {
        T.as(amount);
        this.balance = this[_subtract](this.balance, amount);
      }
    }
    (Account.new = function(accountName, balance) {
      this[accountName$] = accountName;
      this[balance$] = balance;
      ;
    }).prototype = Account.prototype;
    dart.addTypeTests(Account);
    Account.prototype[_is_Account_default] = true;
    dart.addTypeCaches(Account);
    dart.setMethodSignature(Account, () => ({
      __proto__: dart.getMethods(Account.__proto__),
      deposit: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      withdraw: dart.fnType(dart.void, [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(Account, I[0]);
    dart.setFieldSignature(Account, () => ({
      __proto__: dart.getFields(Account.__proto__),
      accountName: dart.fieldType(core.String),
      balance: dart.fieldType(T)
    }));
    return Account;
  });
  banking.Account = banking.Account$();
  dart.addTypeTests(banking.Account, _is_Account_default);
  banking.CheckingAccount = class CheckingAccount extends banking.Account$(core.double) {
    static ['_#new#tearOff'](accountName, balance) {
      return new banking.CheckingAccount.new(accountName, balance);
    }
    [_add](a, b) {
      return a + b;
    }
    [_subtract](a, b) {
      return a - b;
    }
  };
  (banking.CheckingAccount.new = function(accountName, balance) {
    banking.CheckingAccount.__proto__.new.call(this, accountName, balance);
    ;
  }).prototype = banking.CheckingAccount.prototype;
  dart.addTypeTests(banking.CheckingAccount);
  dart.addTypeCaches(banking.CheckingAccount);
  dart.setMethodSignature(banking.CheckingAccount, () => ({
    __proto__: dart.getMethods(banking.CheckingAccount.__proto__),
    [_add]: dart.fnType(core.double, [core.double, core.double]),
    [_subtract]: dart.fnType(core.double, [core.double, core.double])
  }));
  dart.setLibraryUri(banking.CheckingAccount, I[0]);
  banking.SavingsAccount = class SavingsAccount extends banking.Account$(core.int) {
    static ['_#new#tearOff'](accountName, balance) {
      return new banking.SavingsAccount.new(accountName, balance);
    }
    [_add](a, b) {
      return a + b;
    }
    [_subtract](a, b) {
      return a - b;
    }
  };
  (banking.SavingsAccount.new = function(accountName, balance) {
    banking.SavingsAccount.__proto__.new.call(this, accountName, balance);
    ;
  }).prototype = banking.SavingsAccount.prototype;
  dart.addTypeTests(banking.SavingsAccount);
  dart.addTypeCaches(banking.SavingsAccount);
  dart.setMethodSignature(banking.SavingsAccount, () => ({
    __proto__: dart.getMethods(banking.SavingsAccount.__proto__),
    [_add]: dart.fnType(core.int, [core.int, core.int]),
    [_subtract]: dart.fnType(core.int, [core.int, core.int])
  }));
  dart.setLibraryUri(banking.SavingsAccount, I[0]);
  dart.trackLibraries("zapp_user_main", {
    "file:///zapp/project/.zapp_entry.dart": $46zapp_entry,
    "file:///zapp/project/lib/main.dart": main,
    "file:///zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart": web_plugin_registrant,
    "file:///zapp/project/lib/banking.dart": banking
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["/zapp/project/.zapp_entry.dart","/zapp/project/lib/main.dart","/zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart","/zapp/project/lib/banking.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CI,IA1BF,iCAAgB;AACd,UAAoB,6BAGD;AAF8B,QAA9B,AAAkB,6BAElB,eAF2B;;AAEL,QAAF,CAApB;;AAEnB,UAAO,AAAQ,uBAAY;AAKvB,QAJK,AAAqC,qBAA7B,qCAAuB,uBAAW,QAAC;AAG9C,UAFC,AAAQ,sBAAW,2BAA2B,CAC/C;;;wBAIL,SAAC,GAAG;AACL,UAAO,AAAQ,uBAAY;AAIvB,QAHC,AAAQ,sBAAW,wBAAwB,CAC5C,AAAE,CAAD,eACD,AAAW,UAAD;;2DAGM,yCACb,SAAC,MAAM,QAAQ,MAAM;AAC1B,cAAO,AAAQ,uBAAY;AAC4B,YAAlD,AAAQ,sBAAW,wBAAwB,CAAC,IAAI;;;EAI3D;;AAEiB;AAQd,MAPD,MAAS,gCACC;AACS,UAAf;6CAEe;AACmB,UAAjB;;IAGvB;;;ACjDQ,0BAAkB,gCAAgB,oBAAoB;AACS,IAArE,WAAM,AAA8D,gDAAzB,AAAgB,eAAD;AAE7B,IAA7B,AAAgB,eAAD,SAAS;AAC0B,IAAlD,WAAM,AAA2C,6BAAzB,AAAgB,eAAD;AAET,IAA9B,AAAgB,eAAD,UAAU;AAC4B,IAArD,WAAM,AAA8C,gCAAzB,AAAgB,eAAD;AAGpC,yBAAiB,+BAAe,mBAAmB;AACU,IAAnE,WAAM,AAA4D,+CAAxB,AAAe,cAAD;AAE9B,IAA1B,AAAe,cAAD,SAAS;AAC0B,IAAjD,WAAM,AAA0C,6BAAxB,AAAe,cAAD;AAEX,IAA3B,AAAe,cAAD,UAAU;AAC4B,IAApD,WAAM,AAA6C,gCAAxB,AAAe,cAAD;EAC3C;;ECjBwB;;;;;;;;MCHf;;;;;;MACL;;;;;;cAIa;;AACkB,QAA/B,eAAU,WAAK,cAAS,MAAM;MAChC;eAEgB;;AACsB,QAApC,eAAU,gBAAU,cAAS,MAAM;MACrC;;4BARa,aAAkB;MAAlB;MAAkB;;IAAQ;;;;;;;;;;;;;;;;;;;;;;;WAmBpB,GAAU;AAAM,YAAA,AAAE,EAAD,GAAG,CAAC;;gBAGhB,GAAU;AAAM,YAAA,AAAE,EAAD,GAAG,CAAC;;;0CANtB,aAAoB;AAAW,qDAAM,WAAW,EAAE,OAAO;;EAAC;;;;;;;;;;;;;WAcpE,GAAO;AAAM,YAAA,AAAE,EAAD,GAAG,CAAC;;gBAGb,GAAO;AAAM,YAAA,AAAE,EAAD,GAAG,CAAC;;;yCANd,aAAiB;AAAW,oDAAM,WAAW,EAAE,OAAO;;EAAC","file":"main.js"}');
  // Exports:
  return {
    zapp__project__$46zapp_entry: $46zapp_entry,
    zapp__project__lib__main: main,
    zapp__project__$46dart_tool__dartpad__web_plugin_registrant: web_plugin_registrant,
    zapp__project__lib__banking: banking
  };
}));

//# sourceMappingURL=main.js.map
